=========
 IPython
=========

Tools for Interactive Computing in Python
=========================================

    A Python shell with automatic history (input and output), dynamic object
    introspection, easier configuration, command completion, access to the
    system shell and more.  IPython can also be embedded in running programs.

Usage

    ipython [subcommand] [options] [-c cmd | -m mod | file] [--] [arg] ...

    If invoked with no options, it executes the file and exits, passing the
    remaining arguments to the script, just as if you had specified the same
    command with python. You may need to specify `--` before args to be passed
    to the script, to prevent IPython from attempting to parse them. If you
    specify the option `-i` before the filename, it will enter an interactive
    IPython session after running the script, rather than exiting. Files ending
    in .py will be treated as normal Python, but files ending in .ipy can
    contain special IPython syntax (magic commands, shell expansions, etc.).

    Almost all configuration in IPython is available via the command-line. Do
    `ipython --help-all` to see all available options.  For persistent
    configuration, look into your `ipython_config.py` configuration file for
    details.

    This file is typically installed in the `IPYTHONDIR` directory, and there
    is a separate configuration directory for each profile. The default profile
    directory will be located in $IPYTHONDIR/profile_default. For Linux users,
    IPYTHONDIR defaults to `$HOME/.config/ipython`, and for other Unix systems
    to `$HOME/.ipython`.  For Windows users, $HOME resolves to C:\Documents
    and Settings\YourUserName in most instances.

    To initialize a profile with the default configuration file, do::

      $> ipython profile create

    and start editing `IPYTHONDIR/profile_default/ipython_config.py`

    In IPython's documentation, we will refer to this directory as
    `IPYTHONDIR`, you can change its default location by creating an
    environment variable with this name and setting it to the desired path.

    For more information, see the manual available in HTML and PDF in your
    installation, or online at http://ipython.org/documentation.html.

Subcommands
-----------

Subcommands are launched as `ipython3 cmd [args]`. For information on using
subcommand 'cmd', do: `ipython3 cmd -h`.

locate
    print the path to the IPython dir
kernel
    Start a kernel without an attached frontend.
qtconsole
    Launch the IPython Qt Console.
profile
    Create and manage IPython profiles.
console
    Launch the IPython terminal-based Console.
nbconvert
    Convert notebooks to/from other formats.
history
    Manage the IPython history database.
notebook
    Launch the IPython HTML Notebook Server.

Options
-------

Arguments that take values are actually convenience aliases to full
Configurables, whose aliases are listed on the help line. For more information
on full configurables, see '--help-all'.

--matplotlib
    Configure matplotlib for interactive use with
    the default matplotlib backend.
--automagic
    Turn on the auto calling of magic commands. Type %%magic at the
    IPython  prompt  for  more information.
--no-term-title
    Disable auto setting the terminal title.
--init
    Initialize profile with default config files.  This is equivalent
    to running `ipython profile create <profile>` prior to startup.
--no-confirm-exit
    Don't prompt the user when exiting.
--no-deep-reload
    Disable deep (recursive) reloading by default.
--deep-reload
    Enable deep (recursive) reloading by default. IPython can use the
    deep_reload module which reloads changes in modules recursively (it
    replaces the reload() function, so you don't need to change anything to
    use it). deep_reload() forces a full reload of modules whose code may
    have changed, which the default reload() function does not.  When
    deep_reload is off, IPython will use the normal reload(), but
    deep_reload will still be available as dreload(). This feature is off
    by default [which means that you have both normal reload() and
    dreload()].
--pprint
    Enable auto pretty printing of results.
--pydb
    Use the third party 'pydb' package as debugger, instead of pdb.
    Requires that pydb is installed.
--quick
    Enable quick startup with no config files.
--banner
    Display a banner upon starting IPython.
--no-autoindent
    Turn off autoindenting.
--pdb
    Enable auto calling the pdb debugger after every exception.
--color-info
    IPython can display information about objects via a set of func-
    tions, and optionally can use colors for this, syntax highlighting
    source code and various other elements.  However, because this
    information is passed through a pager (like 'less') and many pagers get
    confused with color codes, this option is off by default.  You can test
    it and turn it on permanently in your ipython_config.py file if it
    works for you.  Test it and turn it on permanently if it works with
    your system.  The magic function %%color_info allows you to toggle this
    interactively for testing.
--no-pdb
    Disable auto calling the pdb debugger after every exception.
--no-color-info
    Disable using colors for info related things.
--no-banner
    Don't display a banner upon starting IPython.
--no-pprint
    Disable auto pretty printing of results.
--nosep
    Eliminate all spacing between prompts.
--pylab
    Pre-load matplotlib and numpy for interactive use with
    the default matplotlib backend.
--no-automagic
    Turn off the auto calling of magic commands.
--no-autoedit-syntax
    Turn off auto editing of files with syntax errors.
--quiet
    set log level to logging.CRITICAL (minimize logging output)
--autoedit-syntax
    Turn on auto editing of files with syntax errors.
--confirm-exit
    Set to confirm when you try to exit IPython with an EOF (Control-D
    in Unix, Control-Z/Enter in Windows). By typing 'exit' or 'quit',
    you can force a direct exit without any confirmation.
-i
    If running code from the command line, become interactive afterwards.
    Note: can also be given simply as '-i.'
--autoindent
    Turn on autoindenting.
--classic
    Gives IPython a similar feel to the classic Python prompt.
--term-title
    Enable auto setting the terminal title.
--debug
    set log level to logging.DEBUG (maximize logging output)
--log-level=<Enum> (Application.log_level)
    Default: 30
    Choices: (0, 10, 20, 30, 40, 50, 'DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    Set the log level by value or name.
--matplotlib=<CaselessStrEnum> (InteractiveShellApp.matplotlib)
    Default: None
    Choices: ['auto', 'gtk', 'inline', 'osx', 'qt', 'qt4', 'tk', 'wx']
    Configure matplotlib for interactive use with the default matplotlib
    backend.
--autocall=<Enum> (InteractiveShell.autocall)
    Default: 0
    Choices: (0, 1, 2)
    Make IPython automatically call any callable object even if you didn't type
    explicit parentheses. For example, 'str 43' becomes 'str(43)' automatically.
    The value can be '0' to disable the feature, '1' for 'smart' autocall, where
    it is not applied if there are no more arguments on the line, and '2' for
    'full' autocall, where all callable objects are automatically called (even
    if no arguments are present).
--ipython-dir=<Unicode> (BaseIPythonApplication.ipython_dir)
    Default: '/home/aquiyu/.ipython'
    The name of the IPython directory. This directory is used for logging
    configuration (through profiles), history storage, etc. The default is
    usually $HOME/.ipython. This options can also be specified through the
    environment variable IPYTHONDIR.
--profile=<Unicode> (BaseIPythonApplication.profile)
    Default: 'default'
    The IPython profile to use.
--logfile=<Unicode> (InteractiveShell.logfile)
    Default: ''
    The name of the logfile to use.
--gui=<CaselessStrEnum> (InteractiveShellApp.gui)
    Default: None
    Choices: ('glut', 'gtk', 'gtk3', 'none', 'osx', 'pyglet', 'qt', 'qt4', 'tk', 'wx')
    Enable GUI event loop integration with any of ('glut', 'gtk', 'gtk3',
    'none', 'osx', 'pyglet', 'qt', 'qt4', 'tk', 'wx').
--ext=<Unicode> (InteractiveShellApp.extra_extension)
    Default: ''
    dotted module name of an IPython extension to load.
--colors=<CaselessStrEnum> (InteractiveShell.colors)
    Default: 'LightBG'
    Choices: ('NoColor', 'LightBG', 'Linux')
    Set the color scheme (NoColor, Linux, or LightBG).
-m <Unicode> (InteractiveShellApp.module_to_run)
    Default: ''
    Run the module as a script.
--config=<Unicode> (BaseIPythonApplication.extra_config_file)
    Default: ''
    Path to an extra config file to load.
    If specified, load this config file in addition to any other IPython config.
--logappend=<Unicode> (InteractiveShell.logappend)
    Default: ''
    Start logging to the given file in append mode.
--profile-dir=<Unicode> (ProfileDir.location)
    Default: ''
    Set the profile location directly. This overrides the logic used by the
    `profile` option.
-c <Unicode> (InteractiveShellApp.code_to_run)
    Default: ''
    Execute the given command string.
--pylab=<CaselessStrEnum> (InteractiveShellApp.pylab)
    Default: None
    Choices: ['auto', 'gtk', 'inline', 'osx', 'qt', 'qt4', 'tk', 'wx']
    Pre-load matplotlib and numpy for interactive use, selecting a particular
    matplotlib backend and loop integration.
--cache-size=<Int> (InteractiveShell.cache_size)
    Default: 1000
    Set the size of the output cache.  The default is 1000, you can change it
    permanently in your config file.  Setting it to 0 completely disables the
    caching system, and the minimum value accepted is 20 (if you provide a value
    less than 20, it is reset to 0 and a warning is issued).  This limit is
    defined because otherwise you'll spend more time re-flushing a too small
    cache than working

Class parameters
----------------

Parameters are set from command-line arguments of the form:
`--Class.trait=value`. This line is evaluated in Python, so simple expressions
are allowed, e.g.:: `--C.a='range(3)'` For setting C.a=[0,1,2].

InteractiveShellApp options
---------------------------
--InteractiveShellApp.code_to_run=<Unicode>
    Default: ''
    Execute the given command string.
--InteractiveShellApp.exec_files=<List>
    Default: []
    List of files to run at IPython startup.
--InteractiveShellApp.exec_lines=<List>
    Default: []
    lines of code to run at IPython startup.
--InteractiveShellApp.extensions=<List>
    Default: []
    A list of dotted module names of IPython extensions to load.
--InteractiveShellApp.extra_extension=<Unicode>
    Default: ''
    dotted module name of an IPython extension to load.
--InteractiveShellApp.file_to_run=<Unicode>
    Default: ''
    A file to be run
--InteractiveShellApp.gui=<CaselessStrEnum>
    Default: None
    Choices: ('glut', 'gtk', 'gtk3', 'none', 'osx', 'pyglet', 'qt', 'qt4', 'tk', 'wx')
    Enable GUI event loop integration with any of ('glut', 'gtk', 'gtk3',
    'none', 'osx', 'pyglet', 'qt', 'qt4', 'tk', 'wx').
--InteractiveShellApp.matplotlib=<CaselessStrEnum>
    Default: None
    Choices: ['auto', 'gtk', 'inline', 'osx', 'qt', 'qt4', 'tk', 'wx']
    Configure matplotlib for interactive use with the default matplotlib
    backend.
--InteractiveShellApp.module_to_run=<Unicode>
    Default: ''
    Run the module as a script.
--InteractiveShellApp.pylab=<CaselessStrEnum>
    Default: None
    Choices: ['auto', 'gtk', 'inline', 'osx', 'qt', 'qt4', 'tk', 'wx']
    Pre-load matplotlib and numpy for interactive use, selecting a particular
    matplotlib backend and loop integration.
--InteractiveShellApp.pylab_import_all=<Bool>
    Default: True
    If true, IPython will populate the user namespace with numpy, pylab, etc.
    and an 'import *' is done from numpy and pylab, when using pylab mode.
    When False, pylab mode should not import any names into the user namespace.

TerminalIPythonApp options
--------------------------
--TerminalIPythonApp.code_to_run=<Unicode>
    Default: ''
    Execute the given command string.
--TerminalIPythonApp.copy_config_files=<Bool>
    Default: False
    Whether to install the default config files into the profile dir. If a new
    profile is being created, and IPython contains config files for that
    profile, then they will be staged into the new directory.  Otherwise,
    default config files will be automatically generated.
--TerminalIPythonApp.display_banner=<Bool>
    Default: True
    Whether to display a banner upon starting IPython.
--TerminalIPythonApp.exec_files=<List>
    Default: []
    List of files to run at IPython startup.
--TerminalIPythonApp.exec_lines=<List>
    Default: []
    lines of code to run at IPython startup.
--TerminalIPythonApp.extensions=<List>
    Default: []
    A list of dotted module names of IPython extensions to load.
--TerminalIPythonApp.extra_config_file=<Unicode>
    Default: ''
    Path to an extra config file to load.
    If specified, load this config file in addition to any other IPython config.
--TerminalIPythonApp.extra_extension=<Unicode>
    Default: ''
    dotted module name of an IPython extension to load.
--TerminalIPythonApp.file_to_run=<Unicode>
    Default: ''
    A file to be run
--TerminalIPythonApp.force_interact=<Bool>
    Default: False
    If a command or file is given via the command-line, e.g. 'ipython foo.py
--TerminalIPythonApp.gui=<CaselessStrEnum>
    Default: None
    Choices: ('glut', 'gtk', 'gtk3', 'none', 'osx', 'pyglet', 'qt', 'qt4', 'tk', 'wx')
    Enable GUI event loop integration with any of ('glut', 'gtk', 'gtk3',
    'none', 'osx', 'pyglet', 'qt', 'qt4', 'tk', 'wx').
--TerminalIPythonApp.ignore_old_config=<Bool>
    Default: False
    Suppress warning messages about legacy config files
--TerminalIPythonApp.ipython_dir=<Unicode>
    Default: '/home/aquiyu/.ipython'
    The name of the IPython directory. This directory is used for logging
    configuration (through profiles), history storage, etc. The default is
    usually $HOME/.ipython. This options can also be specified through the
    environment variable IPYTHONDIR.
--TerminalIPythonApp.log_datefmt=<Unicode>
    Default: '%Y-%m-%d %H:%M:%S'
    The date format used by logging formatters for %(asctime)s
--TerminalIPythonApp.log_format=<Unicode>
    Default: '[%(name)s]%(highlevel)s %(message)s'
    The Logging format template
--TerminalIPythonApp.log_level=<Enum>
    Default: 30
    Choices: (0, 10, 20, 30, 40, 50, 'DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    Set the log level by value or name.
--TerminalIPythonApp.matplotlib=<CaselessStrEnum>
    Default: None
    Choices: ['auto', 'gtk', 'inline', 'osx', 'qt', 'qt4', 'tk', 'wx']
    Configure matplotlib for interactive use with the default matplotlib
    backend.
--TerminalIPythonApp.module_to_run=<Unicode>
    Default: ''
    Run the module as a script.
--TerminalIPythonApp.overwrite=<Bool>
    Default: False
    Whether to overwrite existing config files when copying
--TerminalIPythonApp.profile=<Unicode>
    Default: 'default'
    The IPython profile to use.
--TerminalIPythonApp.pylab=<CaselessStrEnum>
    Default: None
    Choices: ['auto', 'gtk', 'inline', 'osx', 'qt', 'qt4', 'tk', 'wx']
    Pre-load matplotlib and numpy for interactive use, selecting a particular
    matplotlib backend and loop integration.
--TerminalIPythonApp.pylab_import_all=<Bool>
    Default: True
    If true, IPython will populate the user namespace with numpy, pylab, etc.
    and an 'import *' is done from numpy and pylab, when using pylab mode.
    When False, pylab mode should not import any names into the user namespace.
--TerminalIPythonApp.quick=<Bool>
    Default: False
    Start IPython quickly by skipping the loading of config files.
--TerminalIPythonApp.verbose_crash=<Bool>
    Default: False
    Create a massive crash report when IPython encounters what may be an
    internal error.  The default is to append a short message to the usual
    traceback

TerminalInteractiveShell options
--------------------------------
--TerminalInteractiveShell.ast_node_interactivity=<Enum>
    Default: 'last_expr'
    Choices: ['all', 'last', 'last_expr', 'none']
    'all', 'last', 'last_expr' or 'none', specifying which nodes should be run
    interactively (displaying output from expressions).
--TerminalInteractiveShell.ast_transformers=<List>
    Default: []
    A list of ast.NodeTransformer subclass instances, which will be applied to
    user input before code is run.
--TerminalInteractiveShell.autocall=<Enum>
    Default: 0
    Choices: (0, 1, 2)
    Make IPython automatically call any callable object even if you didn't type
    explicit parentheses. For example, 'str 43' becomes 'str(43)' automatically.
    The value can be '0' to disable the feature, '1' for 'smart' autocall, where
    it is not applied if there are no more arguments on the line, and '2' for
    'full' autocall, where all callable objects are automatically called (even
    if no arguments are present).
--TerminalInteractiveShell.autoedit_syntax=<CBool>
    Default: False
    auto editing of files with syntax errors.
--TerminalInteractiveShell.autoindent=<CBool>
    Default: True
    Autoindent IPython code entered interactively.
--TerminalInteractiveShell.automagic=<CBool>
    Default: True
    Enable magic commands to be called without the leading %.
--TerminalInteractiveShell.banner1=<Unicode>
    Default: 'Python 3.4.0 (default, Jun 19 2015, 14:20:21) \nType "copyri...
    The part of the banner to be printed before the profile
--TerminalInteractiveShell.banner2=<Unicode>
    Default: ''
    The part of the banner to be printed after the profile
--TerminalInteractiveShell.cache_size=<Int>
    Default: 1000
    Set the size of the output cache.  The default is 1000, you can change it
    permanently in your config file.  Setting it to 0 completely disables the
    caching system, and the minimum value accepted is 20 (if you provide a value
    less than 20, it is reset to 0 and a warning is issued).  This limit is
    defined because otherwise you'll spend more time re-flushing a too small
    cache than working
--TerminalInteractiveShell.color_info=<CBool>
    Default: True
    Use colors for displaying information about objects. Because this
    information is passed through a pager (like 'less'), and some pagers get
    confused with color codes, this capability can be turned off.
--TerminalInteractiveShell.colors=<CaselessStrEnum>
    Default: 'LightBG'
    Choices: ('NoColor', 'LightBG', 'Linux')
    Set the color scheme (NoColor, Linux, or LightBG).
--TerminalInteractiveShell.confirm_exit=<CBool>
    Default: True
    Set to confirm when you try to exit IPython with an EOF (Control-D in Unix,
    Control-Z/Enter in Windows). By typing 'exit' or 'quit', you can force a
    direct exit without any confirmation.
--TerminalInteractiveShell.debug=<CBool>
    Default: False
--TerminalInteractiveShell.deep_reload=<CBool>
    Default: False
    Enable deep (recursive) reloading by default. IPython can use the
    deep_reload module which reloads changes in modules recursively (it replaces
    the reload() function, so you don't need to change anything to use it).
    deep_reload() forces a full reload of modules whose code may have changed,
    which the default reload() function does not.  When deep_reload is off,
    IPython will use the normal reload(), but deep_reload will still be
    available as dreload().
--TerminalInteractiveShell.disable_failing_post_execute=<CBool>
    Default: False
    Don't call post-execute functions that have failed in the past.
--TerminalInteractiveShell.editor=<Unicode>
    Default: 'vi'
    Set the editor used by IPython (default to $EDITOR/vi/notepad).
--TerminalInteractiveShell.history_length=<Int>
    Default: 10000
--TerminalInteractiveShell.ipython_dir=<Unicode>
    Default: ''
--TerminalInteractiveShell.logappend=<Unicode>
    Default: ''
    Start logging to the given file in append mode.
--TerminalInteractiveShell.logfile=<Unicode>
    Default: ''
    The name of the logfile to use.
--TerminalInteractiveShell.logstart=<CBool>
    Default: False
    Start logging to the default log file.
--TerminalInteractiveShell.multiline_history=<CBool>
    Default: True
    Save multi-line entries as one entry in readline history
--TerminalInteractiveShell.object_info_string_level=<Enum>
    Default: 0
    Choices: (0, 1, 2)
--TerminalInteractiveShell.pager=<Unicode>
    Default: 'less'
    The shell program to be used for paging.
--TerminalInteractiveShell.pdb=<CBool>
    Default: False
    Automatically call the pdb debugger after every exception.
--TerminalInteractiveShell.prompt_in1=<Unicode>
    Default: 'In [\\#]: '
    Deprecated, use PromptManager.in_template
--TerminalInteractiveShell.prompt_in2=<Unicode>
    Default: '   .\\D.: '
    Deprecated, use PromptManager.in2_template
--TerminalInteractiveShell.prompt_out=<Unicode>
    Default: 'Out[\\#]: '
    Deprecated, use PromptManager.out_template
--TerminalInteractiveShell.prompts_pad_left=<CBool>
    Default: True
    Deprecated, use PromptManager.justify
--TerminalInteractiveShell.quiet=<CBool>
    Default: False
--TerminalInteractiveShell.readline_parse_and_bind=<List>
    Default: ['tab: complete', '"\\C-l": clear-screen', 'set show-all-if-a...
--TerminalInteractiveShell.readline_remove_delims=<Unicode>
    Default: '-/~'
--TerminalInteractiveShell.readline_use=<CBool>
    Default: True
--TerminalInteractiveShell.screen_length=<Int>
    Default: 0
    Number of lines of your screen, used to control printing of very long
    strings.  Strings longer than this number of lines will be sent through a
    pager instead of directly printed.  The default value for this is 0, which
    means IPython will auto-detect your screen size every time it needs to print
    certain potentially long strings (this doesn't change the behavior of the
    'print' keyword, it's only triggered internally). If for some reason this
    isn't working well (it needs curses support), specify it yourself. Otherwise
    don't change the default.
--TerminalInteractiveShell.separate_in=<SeparateUnicode>
    Default: '\n'
--TerminalInteractiveShell.separate_out=<SeparateUnicode>
    Default: ''
--TerminalInteractiveShell.separate_out2=<SeparateUnicode>
    Default: ''
--TerminalInteractiveShell.show_rewritten_input=<CBool>
    Default: True
    Show rewritten input, e.g. for autocall.
--TerminalInteractiveShell.term_title=<CBool>
    Default: False
    Enable auto setting the terminal title.
--TerminalInteractiveShell.wildcards_case_sensitive=<CBool>
    Default: True
--TerminalInteractiveShell.xmode=<CaselessStrEnum>
    Default: 'Context'
    Choices: ('Context', 'Plain', 'Verbose')

PromptManager options
---------------------
--PromptManager.color_scheme=<Unicode>
    Default: 'Linux'
--PromptManager.in2_template=<Unicode>
    Default: '   .\\D.: '
    Continuation prompt.
--PromptManager.in_template=<Unicode>
    Default: 'In [\\#]: '
    Input prompt.  '\#' will be transformed to the prompt number
--PromptManager.justify=<Bool>
    Default: True
    If True (default), each prompt will be right-aligned with the preceding one.
--PromptManager.out_template=<Unicode>
    Default: 'Out[\\#]: '
    Output prompt. '\#' will be transformed to the prompt number

HistoryManager options
----------------------
--HistoryManager.connection_options=<Dict>
    Default: {}
    Options for configuring the SQLite connection
    These options are passed as keyword args to sqlite3.connect when
    establishing database conenctions.
--HistoryManager.db_cache_size=<Int>
    Default: 0
--HistoryManager.db_log_output=<Bool>
    Default: False
--HistoryManager.enabled=<Bool>
    Default: True
    enable the SQLite history
    set enabled=False to disable the SQLite history, in which case there will be
    no stored history, no SQLite connection, and no background saving thread.
    This may be necessary in some threaded environments where IPython is
    embedded.
--HistoryManager.hist_file=<Unicode>
    Default: ''
    Path to file to use for SQLite history database.
    By default, IPython will put the history database in the IPython profile
    directory.  If you would rather share one history among profiles, you can
    set this value in each, so that they are consistent.
    Due to an issue with fcntl, SQLite is known to misbehave on some NFS mounts.
    If you see IPython hanging, try setting this to something on a local disk,
    e.g::
        ipython --HistoryManager.hist_file=/tmp/ipython_hist.sqlite

ProfileDir options
------------------
--ProfileDir.location=<Unicode>
    Default: ''
    Set the profile location directly. This overrides the logic used by the
    `profile` option.

PlainTextFormatter options
--------------------------
--PlainTextFormatter.deferred_printers=<Dict>
    Default: {}
--PlainTextFormatter.float_precision=<CUnicode>
    Default: ''
--PlainTextFormatter.max_width=<Int>
    Default: 79
--PlainTextFormatter.newline=<Unicode>
    Default: '\n'
--PlainTextFormatter.pprint=<Bool>
    Default: True
--PlainTextFormatter.singleton_printers=<Dict>
    Default: {}
--PlainTextFormatter.type_printers=<Dict>
    Default: {}
--PlainTextFormatter.verbose=<Bool>
    Default: False

IPCompleter options
-------------------
--IPCompleter.greedy=<CBool>
    Default: False
    Activate greedy completion
    This will enable completion on elements of lists, results of function calls,
    etc., but can be unsafe because the code is actually evaluated on TAB.
--IPCompleter.limit_to__all__=<CBool>
    Default: False
    Instruct the completer to use __all__ for the completion
    Specifically, when completing on ``object.<tab>``.
    When True: only those names in obj.__all__ will be included.
    When False [default]: the __all__ attribute is ignored
--IPCompleter.merge_completions=<CBool>
    Default: True
    Whether to merge completion results into a single list
    If False, only the completion results from the first non-empty completer
    will be returned.
--IPCompleter.omit__names=<Enum>
    Default: 2
    Choices: (0, 1, 2)
    Instruct the completer to omit private method names
    Specifically, when completing on ``object.<tab>``.
    When 2 [default]: all names that start with '_' will be excluded.
    When 1: all 'magic' names (``__foo__``) will be excluded.
    When 0: nothing will be excluded.

ScriptMagics options
--------------------
--ScriptMagics.script_magics=<List>
    Default: []
    Extra script cell magics to define
    This generates simple wrappers of `%%script foo` as `%%foo`.
    If you want to add script magics that aren't on your path, specify them in
    script_paths
--ScriptMagics.script_paths=<Dict>
    Default: {}
    Dict mapping short 'ruby' names to full paths, such as
    '/opt/secret/bin/ruby'
    Only necessary for items in script_magics where the default path will not
    find the right interpreter.

StoreMagics options
-------------------
--StoreMagics.autorestore=<Bool>
    Default: False
    If True, any %store-d variables will be automatically restored when IPython
    starts.

Examples
--------

    ipython --matplotlib       # enable matplotlib integration
    ipython --matplotlib=qt    # enable matplotlib integration with qt4 backend
    
    ipython --log-level=DEBUG  # set logging to DEBUG
    ipython --profile=foo      # start with profile foo
    
    ipython qtconsole          # start the qtconsole GUI application
    ipython help qtconsole     # show the help for the qtconsole subcmd
    
    ipython console            # start the terminal-based console application
    ipython help console       # show the help for the console subcmd
    
    ipython notebook           # start the IPython notebook
    ipython help notebook      # show the help for the notebook subcmd
    
    ipython profile create foo # create profile foo w/ default config files
    ipython help profile       # show the help for the profile subcmd
    
    ipython locate             # print the path to the IPython directory
    ipython locate profile foo # print the path to the directory for profile `foo`
    
    ipython nbconvert           # convert notebooks to/from other formats

